/* tslint:disable */
/* eslint-disable */
/**
 * People example
 * The people API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BulkUpsertPersonDto,
  Person,
} from '../models/index';
import {
    BulkUpsertPersonDtoFromJSON,
    BulkUpsertPersonDtoToJSON,
    PersonFromJSON,
    PersonToJSON,
} from '../models/index';

export interface PeopleControllerBulkUpsertRequest {
    bulkUpsertPersonDto: BulkUpsertPersonDto;
}

export interface PeopleControllerFindAllRequest {
    minUpdatedAt?: Date;
    limit?: number;
}

export interface PeopleControllerUpsertRequest {
    id: string;
    person: Person;
}

/**
 * 
 */
export class PeopleApi extends runtime.BaseAPI {

    /**
     */
    async peopleControllerBulkUpsertRaw(requestParameters: PeopleControllerBulkUpsertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.bulkUpsertPersonDto === null || requestParameters.bulkUpsertPersonDto === undefined) {
            throw new runtime.RequiredError('bulkUpsertPersonDto','Required parameter requestParameters.bulkUpsertPersonDto was null or undefined when calling peopleControllerBulkUpsert.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/people`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkUpsertPersonDtoToJSON(requestParameters.bulkUpsertPersonDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async peopleControllerBulkUpsert(requestParameters: PeopleControllerBulkUpsertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.peopleControllerBulkUpsertRaw(requestParameters, initOverrides);
    }

    /**
     */
    async peopleControllerFindAllRaw(requestParameters: PeopleControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Person>>> {
        const queryParameters: any = {};

        if (requestParameters.minUpdatedAt !== undefined) {
            queryParameters['minUpdatedAt'] = (requestParameters.minUpdatedAt as any).toISOString();
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/people`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PersonFromJSON));
    }

    /**
     */
    async peopleControllerFindAll(requestParameters: PeopleControllerFindAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Person>> {
        const response = await this.peopleControllerFindAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async peopleControllerUpsertRaw(requestParameters: PeopleControllerUpsertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling peopleControllerUpsert.');
        }

        if (requestParameters.person === null || requestParameters.person === undefined) {
            throw new runtime.RequiredError('person','Required parameter requestParameters.person was null or undefined when calling peopleControllerUpsert.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/people/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PersonToJSON(requestParameters.person),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async peopleControllerUpsert(requestParameters: PeopleControllerUpsertRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.peopleControllerUpsertRaw(requestParameters, initOverrides);
    }

}
